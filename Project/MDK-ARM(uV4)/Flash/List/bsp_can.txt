; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_can.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_can.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I"C:\Users\xuan5\Desktop\JOSONG-XS03 V3.0\Project\MDK-ARM(uV4)\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_can.crf ..\..\User\bsp\bsp_can.c]
                          THUMB

                          AREA ||i.CAN_Mode_Init||, CODE, READONLY, ALIGN=2

                  CAN_Mode_Init PROC
;;;41     
;;;42     u8 CAN_Mode_Init(u8 tsjw,u8 tbs2,u8 tbs1,u16 brp,u8 mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;43     {
000004  b089              SUB      sp,sp,#0x24
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
00000a  4690              MOV      r8,r2
00000c  4699              MOV      r9,r3
00000e  f8ddb048          LDR      r11,[sp,#0x48]
;;;44     	u16 std_id = 0x200,std_id1 = 0x200;
000012  f44f7400          MOV      r4,#0x200
000016  4625              MOV      r5,r4
;;;45     	u32 ext_id = 0x1800F001;
000018  f8dfa16c          LDR      r10,|L1.392|
;;;46     	GPIO_InitTypeDef GPIO_InitStructure; 
;;;47     	CAN_InitTypeDef        CAN_InitStructure;
;;;48      	CAN_FilterInitTypeDef  CAN_FilterInitStructure;
;;;49     #if CAN_RX0_INT_ENABLE 
;;;50        	NVIC_InitTypeDef  NVIC_InitStructure;
;;;51     #endif
;;;52     
;;;53     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);//使能PORTA时钟	                   											 
00001c  2101              MOVS     r1,#1
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;54     
;;;55       	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);//使能CAN1时钟	
000024  2101              MOVS     r1,#1
000026  0648              LSLS     r0,r1,#25
000028  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;56     
;;;57         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
00002c  00e0              LSLS     r0,r4,#3
00002e  f8ad0020          STRH     r0,[sp,#0x20]
;;;58         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  2003              MOVS     r0,#3
000034  f88d0022          STRB     r0,[sp,#0x22]
;;;59         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽
000038  2018              MOVS     r0,#0x18
00003a  f88d0023          STRB     r0,[sp,#0x23]
;;;60         GPIO_Init(GPIOA, &GPIO_InitStructure);		//初始化IO
00003e  a908              ADD      r1,sp,#0x20
000040  4852              LDR      r0,|L1.396|
000042  f7fffffe          BL       GPIO_Init
;;;61        
;;;62         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000046  00a0              LSLS     r0,r4,#2
000048  f8ad0020          STRH     r0,[sp,#0x20]
;;;63         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//上拉输入
00004c  2048              MOVS     r0,#0x48
00004e  f88d0023          STRB     r0,[sp,#0x23]
;;;64         GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化IO
000052  a908              ADD      r1,sp,#0x20
000054  484d              LDR      r0,|L1.396|
000056  f7fffffe          BL       GPIO_Init
;;;65     	  
;;;66      	//CAN单元设置
;;;67      	CAN_InitStructure.CAN_TTCM=DISABLE;	//禁止时间触发通信模式
00005a  2000              MOVS     r0,#0
00005c  f88d001a          STRB     r0,[sp,#0x1a]
;;;68      	CAN_InitStructure.CAN_ABOM=DISABLE;	//软件对CAN_MCR寄存器的INRQ位进行置1随后清0后，一旦硬件检测到128次11位连续的隐性位，就退出离线状态。
000060  f88d001b          STRB     r0,[sp,#0x1b]
;;;69       	CAN_InitStructure.CAN_AWUM=DISABLE;	//睡眠模式通过软件唤醒(清除CAN->MCR的SLEEP位)//
000064  f88d001c          STRB     r0,[sp,#0x1c]
;;;70       	CAN_InitStructure.CAN_NART=ENABLE;	//ENABLE:CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
000068  2001              MOVS     r0,#1
00006a  f88d001d          STRB     r0,[sp,#0x1d]
;;;71       	CAN_InitStructure.CAN_RFLM=DISABLE;	//在接收溢出时FIFO未被锁定，当接收FIFO的报文未被读出，下一个收到的报文会覆盖原有的报文
00006e  2000              MOVS     r0,#0
000070  f88d001e          STRB     r0,[sp,#0x1e]
;;;72       	CAN_InitStructure.CAN_TXFP=DISABLE;	//发送FIFO优先级由报文的标识符来决定
000074  f88d001f          STRB     r0,[sp,#0x1f]
;;;73       	CAN_InitStructure.CAN_Mode= mode;	//模式设置： mode:0,普通模式;1,回环模式; //
000078  f88db016          STRB     r11,[sp,#0x16]
;;;74       	//设置波特率
;;;75       	CAN_InitStructure.CAN_SJW=tsjw;				//重新同步跳跃宽度(Tsjw)为tsjw+1个时间单位  CAN_SJW_1tq	 CAN_SJW_2tq CAN_SJW_3tq CAN_SJW_4tq
00007c  f88d6017          STRB     r6,[sp,#0x17]
;;;76       	CAN_InitStructure.CAN_BS1=tbs1; 			//Tbs1=tbs1+1个时间单位CAN_BS1_1tq ~CAN_BS1_16tq
000080  f88d8018          STRB     r8,[sp,#0x18]
;;;77       	CAN_InitStructure.CAN_BS2=tbs2;				//Tbs2=tbs2+1个时间单位CAN_BS2_1tq ~	CAN_BS2_8tq
000084  f88d7019          STRB     r7,[sp,#0x19]
;;;78       	CAN_InitStructure.CAN_Prescaler=brp;        //分频系数(Fdiv)为brp+1	//
000088  f8ad9014          STRH     r9,[sp,#0x14]
;;;79       	CAN_Init(CAN1, &CAN_InitStructure);         // 初始化CAN1 
00008c  a905              ADD      r1,sp,#0x14
00008e  4840              LDR      r0,|L1.400|
000090  f7fffffe          BL       CAN_Init
;;;80     
;;;81      	CAN_FilterInitStructure.CAN_FilterNumber=0;	  //设置过滤器组0，范围为0~13  
000094  2000              MOVS     r0,#0
000096  f88d000e          STRB     r0,[sp,#0xe]
;;;82      	CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdList;  //CAN_FilterMode_IdMask:屏蔽模式  CAN_FilterMode_IdList:列表模式
00009a  2001              MOVS     r0,#1
00009c  f88d000f          STRB     r0,[sp,#0xf]
;;;83       	CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit; //设置过滤器位宽为32位  
0000a0  f88d0010          STRB     r0,[sp,#0x10]
;;;84     	if(std_id1!=std_id)
0000a4  42a5              CMP      r5,r4
0000a6  d012              BEQ      |L1.206|
;;;85     	{
;;;86     		CAN_FilterInitStructure.CAN_FilterIdHigh=std_id<<5;  		//设置标识符寄存器高字节  
0000a8  f64f70ff          MOV      r0,#0xffff
0000ac  ea001044          AND      r0,r0,r4,LSL #5
0000b0  f8ad0004          STRH     r0,[sp,#4]
;;;87     		CAN_FilterInitStructure.CAN_FilterIdLow=0|CAN_ID_STD;		//设置标识符寄存器低字节	
0000b4  2000              MOVS     r0,#0
0000b6  f8ad0006          STRH     r0,[sp,#6]
;;;88     		CAN_FilterInitStructure.CAN_FilterMaskIdHigh=std_id1<<5; 	//设置屏蔽寄存器高字节  
0000ba  f64f70ff          MOV      r0,#0xffff
0000be  ea001045          AND      r0,r0,r5,LSL #5
0000c2  f8ad0008          STRH     r0,[sp,#8]
;;;89     		CAN_FilterInitStructure.CAN_FilterMaskIdLow=0|CAN_ID_STD;	//设置屏蔽寄存器低字节  
0000c6  2000              MOVS     r0,#0
0000c8  f8ad000a          STRH     r0,[sp,#0xa]
0000cc  e013              B        |L1.246|
                  |L1.206|
;;;90     	}
;;;91     	else
;;;92     	{
;;;93     		CAN_FilterInitStructure.CAN_FilterIdHigh=std_id<<5;  	//设置标识符寄存器高字节  
0000ce  f64f70ff          MOV      r0,#0xffff
0000d2  ea001044          AND      r0,r0,r4,LSL #5
0000d6  f8ad0004          STRH     r0,[sp,#4]
;;;94     		CAN_FilterInitStructure.CAN_FilterIdLow=0|CAN_ID_STD;	//设置标识符寄存器低字节	
0000da  2000              MOVS     r0,#0
0000dc  f8ad0006          STRH     r0,[sp,#6]
;;;95     		CAN_FilterInitStructure.CAN_FilterMaskIdHigh=((ext_id<<3)>>16) & 0xffff; 		//设置屏蔽寄存器高字节  
0000e0  f3ca304f          UBFX     r0,r10,#13,#16
0000e4  f8ad0008          STRH     r0,[sp,#8]
;;;96     		CAN_FilterInitStructure.CAN_FilterMaskIdLow=((ext_id<<3)& 0xffff) | CAN_ID_EXT;	//设置屏蔽寄存器低字节  
0000e8  f64f70ff          MOV      r0,#0xffff
0000ec  ea0000ca          AND      r0,r0,r10,LSL #3
0000f0  1d00              ADDS     r0,r0,#4
0000f2  f8ad000a          STRH     r0,[sp,#0xa]
                  |L1.246|
;;;97     	}
;;;98     	CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_Filter_FIFO0;//过滤器0关联到FIFO0
0000f6  2000              MOVS     r0,#0
0000f8  f8ad000c          STRH     r0,[sp,#0xc]
;;;99      	CAN_FilterInitStructure.CAN_FilterActivation=ENABLE; //激活过滤器0	
0000fc  2001              MOVS     r0,#1
0000fe  f88d0011          STRB     r0,[sp,#0x11]
;;;100    	CAN_FilterInit(&CAN_FilterInitStructure);//滤波器初始化
000102  a801              ADD      r0,sp,#4
000104  f7fffffe          BL       CAN_FilterInit
;;;101    
;;;102    	std_id = 0x100; std_id1 = 0x100|Physical_ADD[3];
000108  f44f7480          MOV      r4,#0x100
00010c  4821              LDR      r0,|L1.404|
00010e  78c0              LDRB     r0,[r0,#3]  ; Physical_ADD
000110  f4407580          ORR      r5,r0,#0x100
;;;103     	CAN_FilterInitStructure.CAN_FilterNumber=9;	  //设置过滤器组1，范围为0~13  
000114  2009              MOVS     r0,#9
000116  f88d000e          STRB     r0,[sp,#0xe]
;;;104     	CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdList;  //CAN_FilterMode_IdMask:屏蔽模式  CAN_FilterMode_IdList:列表模式
00011a  2001              MOVS     r0,#1
00011c  f88d000f          STRB     r0,[sp,#0xf]
;;;105      	CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit; //设置过滤器位宽为32位  
000120  f88d0010          STRB     r0,[sp,#0x10]
;;;106    	{
;;;107    		CAN_FilterInitStructure.CAN_FilterIdHigh=std_id<<5;  		//设置标识符寄存器高字节  
000124  f64f70ff          MOV      r0,#0xffff
000128  ea001044          AND      r0,r0,r4,LSL #5
00012c  f8ad0004          STRH     r0,[sp,#4]
;;;108    		CAN_FilterInitStructure.CAN_FilterIdLow=0|CAN_ID_STD;		//设置标识符寄存器低字节	
000130  2000              MOVS     r0,#0
000132  f8ad0006          STRH     r0,[sp,#6]
;;;109    		CAN_FilterInitStructure.CAN_FilterMaskIdHigh=std_id1<<5; 	//设置屏蔽寄存器高字节  
000136  f64f70ff          MOV      r0,#0xffff
00013a  ea001045          AND      r0,r0,r5,LSL #5
00013e  f8ad0008          STRH     r0,[sp,#8]
;;;110    		CAN_FilterInitStructure.CAN_FilterMaskIdLow=0|CAN_ID_STD;	//设置屏蔽寄存器低字节  
000142  2000              MOVS     r0,#0
000144  f8ad000a          STRH     r0,[sp,#0xa]
;;;111    	}
;;;112    	CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_Filter_FIFO0;//过滤器1关联到FIFO0
000148  f8ad000c          STRH     r0,[sp,#0xc]
;;;113     	CAN_FilterInitStructure.CAN_FilterActivation=ENABLE; //激活过滤器1	
00014c  2001              MOVS     r0,#1
00014e  f88d0011          STRB     r0,[sp,#0x11]
;;;114    	CAN_FilterInit(&CAN_FilterInitStructure);//滤波器初始化	
000152  a801              ADD      r0,sp,#4
000154  f7fffffe          BL       CAN_FilterInit
;;;115    	
;;;116    #if CAN_RX0_INT_ENABLE
;;;117    	
;;;118    	CAN_ITConfig(CAN1,CAN_IT_FMP0,ENABLE);//FIFO0消息挂号中断允许.		    
000158  2201              MOVS     r2,#1
00015a  2102              MOVS     r1,#2
00015c  480c              LDR      r0,|L1.400|
00015e  f7fffffe          BL       CAN_ITConfig
;;;119      
;;;120      	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
000162  2014              MOVS     r0,#0x14
000164  f88d0000          STRB     r0,[sp,#0]
;;;121      	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;     // 主优先级为1
000168  2001              MOVS     r0,#1
00016a  f88d0001          STRB     r0,[sp,#1]
;;;122      	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;            // 次优先级为0
00016e  2000              MOVS     r0,#0
000170  f88d0002          STRB     r0,[sp,#2]
;;;123      	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000174  2001              MOVS     r0,#1
000176  f88d0003          STRB     r0,[sp,#3]
;;;124      	NVIC_Init(&NVIC_InitStructure);
00017a  4668              MOV      r0,sp
00017c  f7fffffe          BL       NVIC_Init
;;;125    #endif
;;;126    	return 0;
000180  2000              MOVS     r0,#0
;;;127    }   
000182  b009              ADD      sp,sp,#0x24
000184  e8bd8ff0          POP      {r4-r11,pc}
;;;128     
                          ENDP

                  |L1.392|
                          DCD      0x1800f001
                  |L1.396|
                          DCD      0x40010800
                  |L1.400|
                          DCD      0x40006400
                  |L1.404|
                          DCD      Physical_ADD

                          AREA ||i.Can_Receive_Msg||, CODE, READONLY, ALIGN=2

                  Can_Receive_Msg PROC
;;;178    //返回值:0,无数据被收到;	 其他,接收的数据长度;
;;;179    u8 Can_Receive_Msg(u8 *buf)
000000  b530              PUSH     {r4,r5,lr}
;;;180    {		   		   
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
;;;181     	u32 i;
;;;182    	CanRxMsg RxMessage;
;;;183        if( CAN_MessagePending(CAN1,CAN_FIFO0)==0)return 0;		//没有接收到数据,直接退出 
000006  2100              MOVS     r1,#0
000008  480b              LDR      r0,|L2.56|
00000a  f7fffffe          BL       CAN_MessagePending
00000e  b910              CBNZ     r0,|L2.22|
000010  2000              MOVS     r0,#0
                  |L2.18|
;;;184        CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);				//读取数据	
;;;185        for(i=0;i<8;i++)    buf[i]=RxMessage.Data[i];  
;;;186    	return RxMessage.DLC;	
;;;187    }
000012  b005              ADD      sp,sp,#0x14
000014  bd30              POP      {r4,r5,pc}
                  |L2.22|
000016  466a              MOV      r2,sp                 ;184
000018  2100              MOVS     r1,#0                 ;184
00001a  4807              LDR      r0,|L2.56|
00001c  f7fffffe          BL       CAN_Receive
000020  2400              MOVS     r4,#0                 ;185
000022  e004              B        |L2.46|
                  |L2.36|
000024  f10d000b          ADD      r0,sp,#0xb            ;185
000028  5d00              LDRB     r0,[r0,r4]            ;185
00002a  5528              STRB     r0,[r5,r4]            ;185
00002c  1c64              ADDS     r4,r4,#1              ;185
                  |L2.46|
00002e  2c08              CMP      r4,#8                 ;185
000030  d3f8              BCC      |L2.36|
000032  f89d000a          LDRB     r0,[sp,#0xa]          ;186
000036  e7ec              B        |L2.18|
;;;188    
                          ENDP

                  |L2.56|
                          DCD      0x40006400

                          AREA ||i.Can_Send_Msg||, CODE, READONLY, ALIGN=2

                  Can_Send_Msg PROC
;;;151    //返回值:0,成功;	其他,失败;
;;;152    u8 Can_Send_Msg(u8* msg,u8 len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;153    {	
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;154    	u8 mbox;
;;;155    	u16 i=0;
000008  2400              MOVS     r4,#0
;;;156    	CanTxMsg TxMessage;
;;;157    	if(msg[0]==0xB3)	
00000a  7828              LDRB     r0,[r5,#0]
00000c  28b3              CMP      r0,#0xb3
00000e  d105              BNE      |L3.28|
;;;158    		TxMessage.StdId=0x100|Physical_ADD[3];			// 标准标识符为0
000010  4820              LDR      r0,|L3.148|
000012  78c0              LDRB     r0,[r0,#3]  ; Physical_ADD
000014  f4407080          ORR      r0,r0,#0x100
000018  9000              STR      r0,[sp,#0]
00001a  e00c              B        |L3.54|
                  |L3.28|
;;;159    	else if(msg[0]==0xC2)	
00001c  7828              LDRB     r0,[r5,#0]
00001e  28c2              CMP      r0,#0xc2
000020  d105              BNE      |L3.46|
;;;160    		TxMessage.StdId=0x100|Physical_ADD[3];			// 标准标识符为0
000022  481c              LDR      r0,|L3.148|
000024  78c0              LDRB     r0,[r0,#3]  ; Physical_ADD
000026  f4407080          ORR      r0,r0,#0x100
00002a  9000              STR      r0,[sp,#0]
00002c  e003              B        |L3.54|
                  |L3.46|
;;;161    	else				
;;;162    		TxMessage.StdId=0x200|msg[1];	// 标准标识符为0
00002e  7868              LDRB     r0,[r5,#1]
000030  f4407000          ORR      r0,r0,#0x200
000034  9000              STR      r0,[sp,#0]
                  |L3.54|
;;;163    	TxMessage.ExtId=0x1800F001;			// 设置扩展标示符（29位）
000036  4818              LDR      r0,|L3.152|
000038  9001              STR      r0,[sp,#4]
;;;164    	TxMessage.IDE=0;		// 不使用扩展标识符
00003a  2000              MOVS     r0,#0
00003c  f88d0008          STRB     r0,[sp,#8]
;;;165    	TxMessage.RTR=0;		// 消息类型：CAN_RTR_Data为数据帧;CAN_RTR_Remote为远程帧
000040  f88d0009          STRB     r0,[sp,#9]
;;;166    	TxMessage.DLC=len;		// 发送两帧信息
000044  f88d700a          STRB     r7,[sp,#0xa]
;;;167    	for(i=0;i<8;i++)
000048  2400              MOVS     r4,#0
00004a  e005              B        |L3.88|
                  |L3.76|
;;;168    	TxMessage.Data[i]=msg[i];	// 帧信息          
00004c  5d29              LDRB     r1,[r5,r4]
00004e  f10d000b          ADD      r0,sp,#0xb
000052  5501              STRB     r1,[r0,r4]
000054  1c60              ADDS     r0,r4,#1              ;167
000056  b284              UXTH     r4,r0                 ;167
                  |L3.88|
000058  2c08              CMP      r4,#8                 ;167
00005a  dbf7              BLT      |L3.76|
;;;169    	mbox= CAN_Transmit(CAN1, &TxMessage);   
00005c  4669              MOV      r1,sp
00005e  480f              LDR      r0,|L3.156|
000060  f7fffffe          BL       CAN_Transmit
000064  4606              MOV      r6,r0
;;;170    	i=0;
000066  2400              MOVS     r4,#0
;;;171    	while((CAN_TransmitStatus(CAN1, mbox)==CAN_TxStatus_Failed)&&(i<0XFFF))i++;	//等待发送结束
000068  e001              B        |L3.110|
                  |L3.106|
00006a  1c60              ADDS     r0,r4,#1
00006c  b284              UXTH     r4,r0
                  |L3.110|
00006e  4631              MOV      r1,r6
000070  480a              LDR      r0,|L3.156|
000072  f7fffffe          BL       CAN_TransmitStatus
000076  b918              CBNZ     r0,|L3.128|
000078  f64070ff          MOV      r0,#0xfff
00007c  4284              CMP      r4,r0
00007e  dbf4              BLT      |L3.106|
                  |L3.128|
;;;172    	if(i>=0XFFF)return 1;
000080  f64070ff          MOV      r0,#0xfff
000084  4284              CMP      r4,r0
000086  db02              BLT      |L3.142|
000088  2001              MOVS     r0,#1
                  |L3.138|
;;;173    	return 0;		
;;;174    
;;;175    }
00008a  b005              ADD      sp,sp,#0x14
00008c  bdf0              POP      {r4-r7,pc}
                  |L3.142|
00008e  2000              MOVS     r0,#0                 ;173
000090  e7fb              B        |L3.138|
;;;176    //can口接收数据查询
                          ENDP

000092  0000              DCW      0x0000
                  |L3.148|
                          DCD      Physical_ADD
                  |L3.152|
                          DCD      0x1800f001
                  |L3.156|
                          DCD      0x40006400

                          AREA ||i.Package_Send||, CODE, READONLY, ALIGN=2

                  Package_Send PROC
;;;188    
;;;189    void Package_Send(u8 _mode,u8 *Package_Dat)
000000  b57c              PUSH     {r2-r6,lr}
;;;190    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;191    	uint8_t res;
;;;192    	uint8_t Package_SendBuf[8]={0x00};//发送缓冲区
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;193    	switch (_mode)
00000c  2db3              CMP      r5,#0xb3
00000e  d119              BNE      |L4.68|
;;;194        {
;;;195        	case 0xB3:	//未注册数据包
;;;196    			Package_SendBuf[0] = 0xB3;
000010  20b3              MOVS     r0,#0xb3
000012  f88d0000          STRB     r0,[sp,#0]
;;;197    			Package_SendBuf[1] = Physical_ADD[0];	//物理地址
000016  4810              LDR      r0,|L4.88|
000018  7800              LDRB     r0,[r0,#0]  ; Physical_ADD
00001a  f88d0001          STRB     r0,[sp,#1]
;;;198     			Package_SendBuf[2] = Physical_ADD[1];
00001e  480e              LDR      r0,|L4.88|
000020  7840              LDRB     r0,[r0,#1]  ; Physical_ADD
000022  f88d0002          STRB     r0,[sp,#2]
;;;199    			Package_SendBuf[3] = Physical_ADD[2];
000026  480c              LDR      r0,|L4.88|
000028  7880              LDRB     r0,[r0,#2]  ; Physical_ADD
00002a  f88d0003          STRB     r0,[sp,#3]
;;;200    			Package_SendBuf[4] = Physical_ADD[3];
00002e  480a              LDR      r0,|L4.88|
000030  78c0              LDRB     r0,[r0,#3]  ; Physical_ADD
000032  f88d0004          STRB     r0,[sp,#4]
;;;201    			Package_SendBuf[5] = CRC8_Table(Physical_ADD,4);
000036  2104              MOVS     r1,#4
000038  4807              LDR      r0,|L4.88|
00003a  f7fffffe          BL       CRC8_Table
00003e  f88d0005          STRB     r0,[sp,#5]
;;;202    			break;
000042  e000              B        |L4.70|
                  |L4.68|
;;;203        	default:
;;;204        		break;
000044  bf00              NOP      
                  |L4.70|
000046  bf00              NOP                            ;202
;;;205        }
;;;206    	res = Can_Send_Msg(Package_SendBuf,8);//发送8个字节
000048  2108              MOVS     r1,#8
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       Can_Send_Msg
000050  4604              MOV      r4,r0
;;;207        res = res;
000052  bf00              NOP      
;;;208    //	if(res)	{printf(" F, ");}	
;;;209    //	else 	{printf(" S, ");}	
;;;210    }
000054  bd7c              POP      {r2-r6,pc}
;;;211    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      Physical_ADD

                          AREA ||i.Read_PageLogDat||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Read_PageLogDat PROC
;;;212    //按页读取并通过CAN发送_Page页内80条数据
;;;213    void Read_PageLogDat(uint16_t _Page)
000000  b570              PUSH     {r4-r6,lr}
;;;214    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;215    	uint16_t u16Temp=0;	
000006  2600              MOVS     r6,#0
;;;216    	uint8_t _Buffer[12]={0},SendCAN_Buf[8]={0};	//数据缓存
000008  2000              MOVS     r0,#0
00000a  9003              STR      r0,[sp,#0xc]
00000c  9004              STR      r0,[sp,#0x10]
00000e  9005              STR      r0,[sp,#0x14]
000010  9001              STR      r0,[sp,#4]
000012  9002              STR      r0,[sp,#8]
;;;217    	uint8_t i;
;;;218    	u16Temp = _Page * LOGFILE_PAGE_COUNT;
000014  f64f70ff          MOV      r0,#0xffff
000018  ea001684          AND      r6,r0,r4,LSL #6
;;;219    	printf("读取运行日志：%d.\r\n",u16Temp);
00001c  4631              MOV      r1,r6
00001e  a031              ADR      r0,|L5.228|
000020  f7fffffe          BL       __2printf
;;;220    	for(i=0;i<80;i++)
000024  2500              MOVS     r5,#0
000026  e058              B        |L5.218|
                  |L5.40|
;;;221    	{
;;;222    		Read_LogDat(i+u16Temp,_Buffer);
000028  19a9              ADDS     r1,r5,r6
00002a  b288              UXTH     r0,r1
00002c  a903              ADD      r1,sp,#0xc
00002e  f7fffffe          BL       Read_LogDat
;;;223    		SendCAN_Buf[0] = _Buffer[ 0];	//数据域1
000032  f89d000c          LDRB     r0,[sp,#0xc]
000036  f88d0004          STRB     r0,[sp,#4]
;;;224    		SendCAN_Buf[1] = _Buffer[ 1];	//数据域2
00003a  f89d000d          LDRB     r0,[sp,#0xd]
00003e  f88d0005          STRB     r0,[sp,#5]
;;;225    		SendCAN_Buf[2] = _Buffer[ 2];	//数据域3
000042  f89d000e          LDRB     r0,[sp,#0xe]
000046  f88d0006          STRB     r0,[sp,#6]
;;;226    		SendCAN_Buf[3] = _Buffer[ 3];	//数据域4
00004a  f89d000f          LDRB     r0,[sp,#0xf]
00004e  f88d0007          STRB     r0,[sp,#7]
;;;227    		SendCAN_Buf[4] = CRC8_Table(_Buffer,12);	//CRC校验
000052  210c              MOVS     r1,#0xc
000054  a803              ADD      r0,sp,#0xc
000056  f7fffffe          BL       CRC8_Table
00005a  f88d0008          STRB     r0,[sp,#8]
;;;228    		Package_Send(0x21,(u8 *)SendCAN_Buf);	//Delay(0x2F);
00005e  a901              ADD      r1,sp,#4
000060  2021              MOVS     r0,#0x21
000062  f7fffffe          BL       Package_Send
;;;229    		SendCAN_Buf[0] = _Buffer[ 4];	//数据域5
000066  f89d0010          LDRB     r0,[sp,#0x10]
00006a  f88d0004          STRB     r0,[sp,#4]
;;;230    		SendCAN_Buf[1] = _Buffer[ 5];	//数据域6
00006e  f89d0011          LDRB     r0,[sp,#0x11]
000072  f88d0005          STRB     r0,[sp,#5]
;;;231    		SendCAN_Buf[2] = _Buffer[ 6];	//数据域7
000076  f89d0012          LDRB     r0,[sp,#0x12]
00007a  f88d0006          STRB     r0,[sp,#6]
;;;232    		SendCAN_Buf[3] = _Buffer[ 7];	//数据域8
00007e  f89d0013          LDRB     r0,[sp,#0x13]
000082  f88d0007          STRB     r0,[sp,#7]
;;;233    		SendCAN_Buf[4] = CRC8_Table(_Buffer,12);	//CRC校验
000086  210c              MOVS     r1,#0xc
000088  a803              ADD      r0,sp,#0xc
00008a  f7fffffe          BL       CRC8_Table
00008e  f88d0008          STRB     r0,[sp,#8]
;;;234    		Package_Send(0x22,(u8 *)SendCAN_Buf);	    //Delay(0x2F);
000092  a901              ADD      r1,sp,#4
000094  2022              MOVS     r0,#0x22
000096  f7fffffe          BL       Package_Send
;;;235    		SendCAN_Buf[0] = _Buffer[ 8];	//数据域9
00009a  f89d0014          LDRB     r0,[sp,#0x14]
00009e  f88d0004          STRB     r0,[sp,#4]
;;;236    		SendCAN_Buf[1] = _Buffer[ 9];	//数据域10
0000a2  f89d0015          LDRB     r0,[sp,#0x15]
0000a6  f88d0005          STRB     r0,[sp,#5]
;;;237    		SendCAN_Buf[2] = _Buffer[10];	//数据域11
0000aa  f89d0016          LDRB     r0,[sp,#0x16]
0000ae  f88d0006          STRB     r0,[sp,#6]
;;;238    		SendCAN_Buf[3] = _Buffer[11];	//数据域12
0000b2  f89d0017          LDRB     r0,[sp,#0x17]
0000b6  f88d0007          STRB     r0,[sp,#7]
;;;239    		SendCAN_Buf[4] = CRC8_Table(_Buffer,12);	//CRC校验
0000ba  210c              MOVS     r1,#0xc
0000bc  a803              ADD      r0,sp,#0xc
0000be  f7fffffe          BL       CRC8_Table
0000c2  f88d0008          STRB     r0,[sp,#8]
;;;240    		Package_Send(0x23,(u8 *)SendCAN_Buf);	Delay(0x7FFF);//Delay(0xFFFF);
0000c6  a901              ADD      r1,sp,#4
0000c8  2023              MOVS     r0,#0x23
0000ca  f7fffffe          BL       Package_Send
0000ce  f64770ff          MOV      r0,#0x7fff
0000d2  f7fffffe          BL       Delay
0000d6  1c68              ADDS     r0,r5,#1              ;220
0000d8  b2c5              UXTB     r5,r0                 ;220
                  |L5.218|
0000da  2d50              CMP      r5,#0x50              ;220
0000dc  dba4              BLT      |L5.40|
;;;241    	}
;;;242    }
0000de  b006              ADD      sp,sp,#0x18
0000e0  bd70              POP      {r4-r6,pc}
;;;243    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L5.228|
0000e4  b6c1c8a1          DCB      182,193,200,161,212,203,208,208,200,213,214,190,163,186,"%"
0000e8  d4cbd0d0
0000ec  c8d5d6be
0000f0  a3ba25  
0000f3  642e0d0a          DCB      "d.\r\n",0
0000f7  00      

                          AREA ||i.USB_LP_CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=2

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;130    //中断服务函数			    
;;;131    void USB_LP_CAN1_RX0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
000002  b086              SUB      sp,sp,#0x18
;;;133      	CanRxMsg RxMessage;
;;;134    	int i=0;
000004  2400              MOVS     r4,#0
;;;135        CAN_Receive(CAN1, 0, &RxMessage);
000006  aa01              ADD      r2,sp,#4
000008  2100              MOVS     r1,#0
00000a  480b              LDR      r0,|L6.56|
00000c  f7fffffe          BL       CAN_Receive
;;;136    	if(g_RxMessFlag != 0xAA)
000010  480a              LDR      r0,|L6.60|
000012  7800              LDRB     r0,[r0,#0]  ; g_RxMessFlag
000014  28aa              CMP      r0,#0xaa
000016  d00c              BEQ      |L6.50|
;;;137    	{
;;;138    		for(i=0;i<8;i++)	
000018  bf00              NOP      
00001a  e005              B        |L6.40|
                  |L6.28|
;;;139    		{
;;;140    			//printf("%02X",RxMessage.Data[i]);
;;;141    			g_RxMessage[i] = RxMessage.Data[i];
00001c  f10d000f          ADD      r0,sp,#0xf
000020  5d00              LDRB     r0,[r0,r4]
000022  4907              LDR      r1,|L6.64|
000024  5508              STRB     r0,[r1,r4]
000026  1c64              ADDS     r4,r4,#1              ;138
                  |L6.40|
000028  2c08              CMP      r4,#8                 ;138
00002a  dbf7              BLT      |L6.28|
;;;142    		}
;;;143    		g_RxMessFlag = 0xAA;
00002c  20aa              MOVS     r0,#0xaa
00002e  4903              LDR      r1,|L6.60|
000030  7008              STRB     r0,[r1,#0]
                  |L6.50|
;;;144    	}
;;;145    }
000032  b006              ADD      sp,sp,#0x18
000034  bd10              POP      {r4,pc}
;;;146    #endif
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      0x40006400
                  |L6.60|
                          DCD      g_RxMessFlag
                  |L6.64|
                          DCD      g_RxMessage
