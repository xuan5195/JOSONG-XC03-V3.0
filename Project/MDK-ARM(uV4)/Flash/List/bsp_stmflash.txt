; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_stmflash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_stmflash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I"C:\Users\xuan5\Desktop\JOSONG-XS03 V3.0\Project\MDK-ARM(uV4)\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_stmflash.crf ..\..\User\bsp\bsp_stmflash.c]
                          THUMB

                          AREA ||i.Clear_Flash_Dat||, CODE, READONLY, ALIGN=2

                  Clear_Flash_Dat PROC
;;;133    }
;;;134    void Clear_Flash_Dat(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;135    {
;;;136    	u8 datatemp[16]={0};
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  9001              STR      r0,[sp,#4]
000008  9002              STR      r0,[sp,#8]
00000a  9003              STR      r0,[sp,#0xc]
;;;137    	STMFLASH_Write(FLASH_SAVE_ADD,datatemp,16);
00000c  2210              MOVS     r2,#0x10
00000e  4669              MOV      r1,sp
000010  4801              LDR      r0,|L1.24|
000012  f7fffffe          BL       STMFLASH_Write
;;;138    }
000016  bd1f              POP      {r0-r4,pc}
;;;139    
                          ENDP

                  |L1.24|
                          DCD      0x0800fc00

                          AREA ||i.Read_Flash_Dat||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Read_Flash_Dat PROC
;;;55     
;;;56     void Read_Flash_Dat(void)
000000  b500              PUSH     {lr}
;;;57     {
000002  b091              SUB      sp,sp,#0x44
;;;58     	u8 datatemp[16]={0};
000004  2000              MOVS     r0,#0
000006  900d              STR      r0,[sp,#0x34]
000008  900e              STR      r0,[sp,#0x38]
00000a  900f              STR      r0,[sp,#0x3c]
00000c  9010              STR      r0,[sp,#0x40]
;;;59     	STMFLASH_Read(FLASH_SAVE_ADD,datatemp,16);
00000e  2210              MOVS     r2,#0x10
000010  a90d              ADD      r1,sp,#0x34
000012  485f              LDR      r0,|L2.400|
000014  f7fffffe          BL       STMFLASH_Read
;;;60     	printf("STMFLASH_Read: %02X%02X%02X%02X; %02X%02X%02X%02X; %02X%02X%02X%02X; %02X%02X%02X%02X;\r\n",\
000018  f89d0043          LDRB     r0,[sp,#0x43]
00001c  f89d1042          LDRB     r1,[sp,#0x42]
000020  f89d2040          LDRB     r2,[sp,#0x40]
000024  9209              STR      r2,[sp,#0x24]
000026  e9cd210a          STRD     r2,r1,[sp,#0x28]
00002a  900c              STR      r0,[sp,#0x30]
00002c  f89d003f          LDRB     r0,[sp,#0x3f]
000030  f89d103e          LDRB     r1,[sp,#0x3e]
000034  f89d203d          LDRB     r2,[sp,#0x3d]
000038  f89d303c          LDRB     r3,[sp,#0x3c]
00003c  e9cd3205          STRD     r3,r2,[sp,#0x14]
000040  e9cd1007          STRD     r1,r0,[sp,#0x1c]
000044  f89d103b          LDRB     r1,[sp,#0x3b]
000048  f89d203a          LDRB     r2,[sp,#0x3a]
00004c  f89d0039          LDRB     r0,[sp,#0x39]
000050  f89d3038          LDRB     r3,[sp,#0x38]
000054  e9cd3001          STRD     r3,r0,[sp,#4]
000058  e9cd2103          STRD     r2,r1,[sp,#0xc]
00005c  f89d0037          LDRB     r0,[sp,#0x37]
000060  9000              STR      r0,[sp,#0]
000062  f89d3036          LDRB     r3,[sp,#0x36]
000066  f89d2035          LDRB     r2,[sp,#0x35]
00006a  f89d1034          LDRB     r1,[sp,#0x34]
00006e  4849              LDR      r0,|L2.404|
000070  f7fffffe          BL       __2printf
;;;61     	datatemp[ 0],datatemp[ 1],datatemp[ 2],datatemp[ 3],datatemp[ 4],datatemp[ 5],datatemp[ 6],datatemp[ 7],\
;;;62     	datatemp[ 8],datatemp[ 9],datatemp[10],datatemp[11],datatemp[12],datatemp[12],datatemp[14],datatemp[15]	);
;;;63     	if(datatemp[4] != 0xAA)	//新板子未能电过。
000074  f89d0038          LDRB     r0,[sp,#0x38]
000078  28aa              CMP      r0,#0xaa
00007a  d04c              BEQ      |L2.278|
;;;64     	{
;;;65     		printf("New Board...\r\n");
00007c  a046              ADR      r0,|L2.408|
00007e  f7fffffe          BL       __2printf
;;;66     		if((datatemp[0]!=0x00)&&(datatemp[0]!=0xFF)&&(datatemp[1]!=0x00)&&(datatemp[1]!=0xFF))	//检测SN是否写入
000082  f89d0034          LDRB     r0,[sp,#0x34]
000086  2800              CMP      r0,#0
000088  d07f              BEQ      |L2.394|
00008a  f89d0034          LDRB     r0,[sp,#0x34]
00008e  28ff              CMP      r0,#0xff
000090  d07b              BEQ      |L2.394|
000092  f89d0035          LDRB     r0,[sp,#0x35]
000096  2800              CMP      r0,#0
000098  d077              BEQ      |L2.394|
00009a  f89d0035          LDRB     r0,[sp,#0x35]
00009e  28ff              CMP      r0,#0xff
0000a0  d073              BEQ      |L2.394|
;;;67     		{	//SN存在-->写入RFID信息及核验数据
;;;68     			printf("SN check OK,Write RFID_Dat,CRC_Dat...\r\n");
0000a2  a041              ADR      r0,|L2.424|
0000a4  f7fffffe          BL       __2printf
;;;69     			datatemp[ 4] = 0xAA;	//UseFlag
0000a8  20aa              MOVS     r0,#0xaa
0000aa  f88d0038          STRB     r0,[sp,#0x38]
;;;70     			datatemp[ 5] = FM1702_Key[0];	//RFID_key0
0000ae  4848              LDR      r0,|L2.464|
0000b0  7800              LDRB     r0,[r0,#0]  ; FM1702_Key
0000b2  f88d0039          STRB     r0,[sp,#0x39]
;;;71     			datatemp[ 6] = FM1702_Key[1];	//RFID_key1
0000b6  4846              LDR      r0,|L2.464|
0000b8  7840              LDRB     r0,[r0,#1]  ; FM1702_Key
0000ba  f88d003a          STRB     r0,[sp,#0x3a]
;;;72     			datatemp[ 7] = FM1702_Key[2];	//RFID_key2
0000be  4844              LDR      r0,|L2.464|
0000c0  7880              LDRB     r0,[r0,#2]  ; FM1702_Key
0000c2  f88d003b          STRB     r0,[sp,#0x3b]
;;;73     			datatemp[ 8] = FM1702_Key[3];	//RFID_key3
0000c6  4842              LDR      r0,|L2.464|
0000c8  78c0              LDRB     r0,[r0,#3]  ; FM1702_Key
0000ca  f88d003c          STRB     r0,[sp,#0x3c]
;;;74     			datatemp[ 9] = FM1702_Key[4];	//RFID_key4
0000ce  4840              LDR      r0,|L2.464|
0000d0  7900              LDRB     r0,[r0,#4]  ; FM1702_Key
0000d2  f88d003d          STRB     r0,[sp,#0x3d]
;;;75     			datatemp[10] = FM1702_Key[5];	//RFID_key5
0000d6  483e              LDR      r0,|L2.464|
0000d8  7940              LDRB     r0,[r0,#5]  ; FM1702_Key
0000da  f88d003e          STRB     r0,[sp,#0x3e]
;;;76     			datatemp[11] = FM1702_Key[6];	//块地址
0000de  483c              LDR      r0,|L2.464|
0000e0  7980              LDRB     r0,[r0,#6]  ; FM1702_Key
0000e2  f88d003f          STRB     r0,[sp,#0x3f]
;;;77     			datatemp[12] = WaterCost;		//水费 最小扣款金额
0000e6  483b              LDR      r0,|L2.468|
0000e8  7800              LDRB     r0,[r0,#0]  ; WaterCost
0000ea  f88d0040          STRB     r0,[sp,#0x40]
;;;78     			datatemp[13] = CostNum;			//脉冲数
0000ee  483a              LDR      r0,|L2.472|
0000f0  7800              LDRB     r0,[r0,#0]  ; CostNum
0000f2  f88d0041          STRB     r0,[sp,#0x41]
;;;79     			datatemp[14] = g_IAP_Flag;		//程序升级标志
0000f6  4839              LDR      r0,|L2.476|
0000f8  7800              LDRB     r0,[r0,#0]  ; g_IAP_Flag
0000fa  f88d0042          STRB     r0,[sp,#0x42]
;;;80     			datatemp[15] = CRC8_Table(datatemp+4,11);
0000fe  210b              MOVS     r1,#0xb
000100  a80e              ADD      r0,sp,#0x38
000102  f7fffffe          BL       CRC8_Table
000106  f88d0043          STRB     r0,[sp,#0x43]
;;;81     			STMFLASH_Write(FLASH_SAVE_ADD,datatemp,16);			
00010a  2210              MOVS     r2,#0x10
00010c  a90d              ADD      r1,sp,#0x34
00010e  4820              LDR      r0,|L2.400|
000110  f7fffffe          BL       STMFLASH_Write
000114  e039              B        |L2.394|
                  |L2.278|
;;;82     		}
;;;83     	}
;;;84     	else	//使用过的，直接读取SN数据，及校验数据
;;;85     	{
;;;86     		printf("Read RFID_Dat,CRC_Dat...\r\n");
000116  a032              ADR      r0,|L2.480|
000118  f7fffffe          BL       __2printf
;;;87     		if( CRC8_Table(datatemp+4,11) == datatemp[15] )
00011c  210b              MOVS     r1,#0xb
00011e  a80e              ADD      r0,sp,#0x38
000120  f7fffffe          BL       CRC8_Table
000124  f89d1043          LDRB     r1,[sp,#0x43]
000128  4288              CMP      r0,r1
00012a  d12e              BNE      |L2.394|
;;;88     		{
;;;89     			Physical_ADD[0] = datatemp[0];	//物理地址0
00012c  f89d0034          LDRB     r0,[sp,#0x34]
000130  4932              LDR      r1,|L2.508|
000132  7008              STRB     r0,[r1,#0]
;;;90     			Physical_ADD[1] = datatemp[1];	//物理地址1
000134  f89d0035          LDRB     r0,[sp,#0x35]
000138  7048              STRB     r0,[r1,#1]
;;;91     			Physical_ADD[2] = datatemp[2];	//物理地址2
00013a  f89d0036          LDRB     r0,[sp,#0x36]
00013e  7088              STRB     r0,[r1,#2]
;;;92     			Physical_ADD[3] = datatemp[3];	//物理地址3
000140  f89d0037          LDRB     r0,[sp,#0x37]
000144  70c8              STRB     r0,[r1,#3]
;;;93     			
;;;94     			FM1702_Key[0] 	= datatemp[5];	//RFID_key0
000146  f89d0039          LDRB     r0,[sp,#0x39]
00014a  4921              LDR      r1,|L2.464|
00014c  7008              STRB     r0,[r1,#0]
;;;95     			FM1702_Key[1] 	= datatemp[6];	//RFID_key1
00014e  f89d003a          LDRB     r0,[sp,#0x3a]
000152  7048              STRB     r0,[r1,#1]
;;;96     			FM1702_Key[2] 	= datatemp[7];	//RFID_key2
000154  f89d003b          LDRB     r0,[sp,#0x3b]
000158  7088              STRB     r0,[r1,#2]
;;;97     			FM1702_Key[3] 	= datatemp[8];	//RFID_key3
00015a  f89d003c          LDRB     r0,[sp,#0x3c]
00015e  70c8              STRB     r0,[r1,#3]
;;;98     			FM1702_Key[4] 	= datatemp[9];	//RFID_key4
000160  f89d003d          LDRB     r0,[sp,#0x3d]
000164  7108              STRB     r0,[r1,#4]
;;;99     			FM1702_Key[5] 	= datatemp[10];	//RFID_key5
000166  f89d003e          LDRB     r0,[sp,#0x3e]
00016a  7148              STRB     r0,[r1,#5]
;;;100    			FM1702_Key[6] 	= datatemp[11];	//块地址
00016c  f89d003f          LDRB     r0,[sp,#0x3f]
000170  7188              STRB     r0,[r1,#6]
;;;101    			WaterCost 		= datatemp[12];	//水费 最小扣款金额
000172  f89d0040          LDRB     r0,[sp,#0x40]
000176  4917              LDR      r1,|L2.468|
000178  7008              STRB     r0,[r1,#0]
;;;102    			CostNum 		= datatemp[13];	//脉冲数
00017a  f89d0041          LDRB     r0,[sp,#0x41]
00017e  4916              LDR      r1,|L2.472|
000180  7008              STRB     r0,[r1,#0]
;;;103    			g_IAP_Flag 		= datatemp[14];	//程序升级标志
000182  f89d0042          LDRB     r0,[sp,#0x42]
000186  4915              LDR      r1,|L2.476|
000188  7008              STRB     r0,[r1,#0]
                  |L2.394|
;;;104    		}
;;;105    	}
;;;106    }
00018a  b011              ADD      sp,sp,#0x44
00018c  bd00              POP      {pc}
;;;107    
                          ENDP

00018e  0000              DCW      0x0000
                  |L2.400|
                          DCD      0x0800fc00
                  |L2.404|
                          DCD      ||.conststring||
                  |L2.408|
000198  4e657720          DCB      "New Board...\r\n",0
00019c  426f6172
0001a0  642e2e2e
0001a4  0d0a00  
0001a7  00                DCB      0
                  |L2.424|
0001a8  534e2063          DCB      "SN check OK,Write RFID_Dat,CRC_Dat...\r\n",0
0001ac  6865636b
0001b0  204f4b2c
0001b4  57726974
0001b8  65205246
0001bc  49445f44
0001c0  61742c43
0001c4  52435f44
0001c8  61742e2e
0001cc  2e0d0a00
                  |L2.464|
                          DCD      FM1702_Key
                  |L2.468|
                          DCD      WaterCost
                  |L2.472|
                          DCD      CostNum
                  |L2.476|
                          DCD      g_IAP_Flag
                  |L2.480|
0001e0  52656164          DCB      "Read RFID_Dat,CRC_Dat...\r\n",0
0001e4  20524649
0001e8  445f4461
0001ec  742c4352
0001f0  435f4461
0001f4  742e2e2e
0001f8  0d0a00  
0001fb  00                DCB      0
                  |L2.508|
                          DCD      Physical_ADD

                          AREA ||i.STMFLASH_Read||, CODE, READONLY, ALIGN=1

                  STMFLASH_Read PROC
;;;41     //NumToWrite:半字(16位)数
;;;42     void STMFLASH_Read(u32 ReadAddr,u8 *pBuffer,u16 NumToRead)   	
000000  b570              PUSH     {r4-r6,lr}
;;;43     {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
000006  4615              MOV      r5,r2
;;;44     	u16 i,DateTemp=0;
000008  2600              MOVS     r6,#0
;;;45     	for(i=0;i<NumToRead;(i=i+2))
00000a  2200              MOVS     r2,#0
00000c  e00a              B        |L3.36|
                  |L3.14|
;;;46     	{
;;;47     		DateTemp = STMFLASH_ReadHalfWord(ReadAddr);//读取2个字节.
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       STMFLASH_ReadHalfWord
000014  4606              MOV      r6,r0
;;;48     		pBuffer[i]	=(u8)(DateTemp);
000016  549e              STRB     r6,[r3,r2]
;;;49     		pBuffer[i+1]=(u8)(DateTemp>>8);
000018  1231              ASRS     r1,r6,#8
00001a  1c50              ADDS     r0,r2,#1
00001c  5419              STRB     r1,[r3,r0]
;;;50     		ReadAddr+=2;//偏移2个字节.	
00001e  1ca4              ADDS     r4,r4,#2
000020  1c90              ADDS     r0,r2,#2              ;45
000022  b282              UXTH     r2,r0                 ;45
                  |L3.36|
000024  42aa              CMP      r2,r5                 ;45
000026  dbf2              BLT      |L3.14|
;;;51     	}
;;;52     }
000028  bd70              POP      {r4-r6,pc}
;;;53     
                          ENDP


                          AREA ||i.STMFLASH_ReadHalfWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadHalfWord PROC
;;;15     //返回值:对应数据.
;;;16     u16 STMFLASH_ReadHalfWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;17     {
;;;18     	return *(vu16*)faddr; 
000002  8808              LDRH     r0,[r1,#0]
;;;19     }
000004  4770              BX       lr
;;;20     
                          ENDP


                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=2

                  STMFLASH_Write PROC
;;;21     
;;;22     static void STMFLASH_Write(u32 WriteAddr,u8 *pBuffer,u16 NumToWrite)	
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;23     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;24      	u16 i,DateTemp=0;    
00000a  f04f0800          MOV      r8,#0
;;;25     	FLASH_Unlock();		//解锁
00000e  f7fffffe          BL       FLASH_Unlock
;;;26     	FLASH_ClearFlag(FLASH_FLAG_BSY|FLASH_FLAG_EOP|FLASH_FLAG_PGERR|FLASH_FLAG_WRPRTERR);
000012  2035              MOVS     r0,#0x35
000014  f7fffffe          BL       FLASH_ClearFlag
;;;27     	FLASH_ErasePage(FLASH_SAVE_ADD);	
000018  480c              LDR      r0,|L5.76|
00001a  f7fffffe          BL       FLASH_ErasePage
;;;28     	for(i=0;i<NumToWrite;(i=i+2))
00001e  2400              MOVS     r4,#0
000020  e00d              B        |L5.62|
                  |L5.34|
;;;29     	{
;;;30     		DateTemp = ((u16)pBuffer[i+1])<<8 ;
000022  1c60              ADDS     r0,r4,#1
000024  5c28              LDRB     r0,[r5,r0]
000026  ea4f2800          LSL      r8,r0,#8
;;;31     		DateTemp = DateTemp|pBuffer[i];
00002a  5d28              LDRB     r0,[r5,r4]
00002c  ea400808          ORR      r8,r0,r8
;;;32     		FLASH_ProgramHalfWord(WriteAddr,DateTemp);
000030  4641              MOV      r1,r8
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       FLASH_ProgramHalfWord
;;;33     	    WriteAddr+=2;//地址增加2.
000038  1cb6              ADDS     r6,r6,#2
00003a  1ca0              ADDS     r0,r4,#2              ;28
00003c  b284              UXTH     r4,r0                 ;28
                  |L5.62|
00003e  42bc              CMP      r4,r7                 ;28
000040  dbef              BLT      |L5.34|
;;;34     	}  
;;;35     	FLASH_Lock();//上锁
000042  f7fffffe          BL       FLASH_Lock
;;;36     }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;37     
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
                          DCD      0x0800fc00

                          AREA ||i.Write_Flash_Dat||, CODE, READONLY, ALIGN=2

                  Write_Flash_Dat PROC
;;;107    
;;;108    void Write_Flash_Dat(void)
000000  b500              PUSH     {lr}
;;;109    {
000002  b089              SUB      sp,sp,#0x24
;;;110    	u8 datatemp1[16]={0},datatemp2[16]={0};
000004  2000              MOVS     r0,#0
000006  9005              STR      r0,[sp,#0x14]
000008  9006              STR      r0,[sp,#0x18]
00000a  9007              STR      r0,[sp,#0x1c]
00000c  9008              STR      r0,[sp,#0x20]
00000e  9001              STR      r0,[sp,#4]
000010  9002              STR      r0,[sp,#8]
000012  9003              STR      r0,[sp,#0xc]
000014  9004              STR      r0,[sp,#0x10]
;;;111    	STMFLASH_Read(FLASH_SAVE_ADD,datatemp1,16);	//读出的值 对比 以下要写入的值
000016  2210              MOVS     r2,#0x10
000018  a905              ADD      r1,sp,#0x14
00001a  4843              LDR      r0,|L6.296|
00001c  f7fffffe          BL       STMFLASH_Read
;;;112    	datatemp2[ 0] = datatemp1[0];//物理地址0
000020  f89d0014          LDRB     r0,[sp,#0x14]
000024  f88d0004          STRB     r0,[sp,#4]
;;;113    	datatemp2[ 1] = datatemp1[1];//物理地址1
000028  f89d0015          LDRB     r0,[sp,#0x15]
00002c  f88d0005          STRB     r0,[sp,#5]
;;;114    	datatemp2[ 2] = datatemp1[2];//物理地址2
000030  f89d0016          LDRB     r0,[sp,#0x16]
000034  f88d0006          STRB     r0,[sp,#6]
;;;115    	datatemp2[ 3] = datatemp1[3];//物理地址3
000038  f89d0017          LDRB     r0,[sp,#0x17]
00003c  f88d0007          STRB     r0,[sp,#7]
;;;116    	datatemp2[ 4] = 0xAA;			//标志位
000040  20aa              MOVS     r0,#0xaa
000042  f88d0008          STRB     r0,[sp,#8]
;;;117    	datatemp2[ 5] = FM1702_Key[0];	//RFID_key0
000046  4839              LDR      r0,|L6.300|
000048  7800              LDRB     r0,[r0,#0]  ; FM1702_Key
00004a  f88d0009          STRB     r0,[sp,#9]
;;;118    	datatemp2[ 6] = FM1702_Key[1];	//RFID_key1
00004e  4837              LDR      r0,|L6.300|
000050  7840              LDRB     r0,[r0,#1]  ; FM1702_Key
000052  f88d000a          STRB     r0,[sp,#0xa]
;;;119    	datatemp2[ 7] = FM1702_Key[2];	//RFID_key2
000056  4835              LDR      r0,|L6.300|
000058  7880              LDRB     r0,[r0,#2]  ; FM1702_Key
00005a  f88d000b          STRB     r0,[sp,#0xb]
;;;120    	datatemp2[ 8] = FM1702_Key[3];	//RFID_key3
00005e  4833              LDR      r0,|L6.300|
000060  78c0              LDRB     r0,[r0,#3]  ; FM1702_Key
000062  f88d000c          STRB     r0,[sp,#0xc]
;;;121    	datatemp2[ 9] = FM1702_Key[4];	//RFID_key4
000066  4831              LDR      r0,|L6.300|
000068  7900              LDRB     r0,[r0,#4]  ; FM1702_Key
00006a  f88d000d          STRB     r0,[sp,#0xd]
;;;122    	datatemp2[10] = FM1702_Key[5];	//RFID_key5
00006e  482f              LDR      r0,|L6.300|
000070  7940              LDRB     r0,[r0,#5]  ; FM1702_Key
000072  f88d000e          STRB     r0,[sp,#0xe]
;;;123    	datatemp2[11] = FM1702_Key[6];	//块地址
000076  482d              LDR      r0,|L6.300|
000078  7980              LDRB     r0,[r0,#6]  ; FM1702_Key
00007a  f88d000f          STRB     r0,[sp,#0xf]
;;;124    	datatemp2[12] = WaterCost;		//水费 最小扣款金额
00007e  482c              LDR      r0,|L6.304|
000080  7800              LDRB     r0,[r0,#0]  ; WaterCost
000082  f88d0010          STRB     r0,[sp,#0x10]
;;;125    	datatemp2[13] = CostNum;		//脉冲数
000086  482b              LDR      r0,|L6.308|
000088  7800              LDRB     r0,[r0,#0]  ; CostNum
00008a  f88d0011          STRB     r0,[sp,#0x11]
;;;126    	datatemp2[14] = g_IAP_Flag;		//程度升级标志
00008e  482a              LDR      r0,|L6.312|
000090  7800              LDRB     r0,[r0,#0]  ; g_IAP_Flag
000092  f88d0012          STRB     r0,[sp,#0x12]
;;;127    	datatemp2[15] = CRC8_Table(datatemp2+4,11);
000096  210b              MOVS     r1,#0xb
000098  a802              ADD      r0,sp,#8
00009a  f7fffffe          BL       CRC8_Table
00009e  f88d0013          STRB     r0,[sp,#0x13]
;;;128    	if((datatemp2[15]!=datatemp1[15])||(datatemp2[13]!=datatemp1[13])||(datatemp2[12]!=datatemp1[12])||\
0000a2  f89d0013          LDRB     r0,[sp,#0x13]
0000a6  f89d1023          LDRB     r1,[sp,#0x23]
0000aa  4288              CMP      r0,r1
0000ac  d135              BNE      |L6.282|
0000ae  f89d0011          LDRB     r0,[sp,#0x11]
0000b2  f89d1021          LDRB     r1,[sp,#0x21]
0000b6  4288              CMP      r0,r1
0000b8  d12f              BNE      |L6.282|
0000ba  f89d0010          LDRB     r0,[sp,#0x10]
0000be  f89d1020          LDRB     r1,[sp,#0x20]
0000c2  4288              CMP      r0,r1
0000c4  d129              BNE      |L6.282|
;;;129    	   (datatemp2[11]!=datatemp1[11])||(datatemp2[10]!=datatemp1[10])||(datatemp2[ 9]!=datatemp1[ 9])||\
0000c6  f89d000f          LDRB     r0,[sp,#0xf]
0000ca  f89d101f          LDRB     r1,[sp,#0x1f]
0000ce  4288              CMP      r0,r1
0000d0  d123              BNE      |L6.282|
0000d2  f89d000e          LDRB     r0,[sp,#0xe]
0000d6  f89d101e          LDRB     r1,[sp,#0x1e]
0000da  4288              CMP      r0,r1
0000dc  d11d              BNE      |L6.282|
0000de  f89d000d          LDRB     r0,[sp,#0xd]
0000e2  f89d101d          LDRB     r1,[sp,#0x1d]
0000e6  4288              CMP      r0,r1
0000e8  d117              BNE      |L6.282|
;;;130    	   (datatemp2[ 8]!=datatemp1[ 8])||(datatemp2[ 7]!=datatemp1[ 7])||(datatemp2[ 6]!=datatemp1[ 6])||\
0000ea  f89d000c          LDRB     r0,[sp,#0xc]
0000ee  f89d101c          LDRB     r1,[sp,#0x1c]
0000f2  4288              CMP      r0,r1
0000f4  d111              BNE      |L6.282|
0000f6  f89d000b          LDRB     r0,[sp,#0xb]
0000fa  f89d101b          LDRB     r1,[sp,#0x1b]
0000fe  4288              CMP      r0,r1
000100  d10b              BNE      |L6.282|
000102  f89d000a          LDRB     r0,[sp,#0xa]
000106  f89d101a          LDRB     r1,[sp,#0x1a]
00010a  4288              CMP      r0,r1
00010c  d105              BNE      |L6.282|
;;;131    	   (datatemp2[ 5]!=datatemp1[ 5]))	//数据不一样才写Flash
00010e  f89d0009          LDRB     r0,[sp,#9]
000112  f89d1019          LDRB     r1,[sp,#0x19]
000116  4288              CMP      r0,r1
000118  d004              BEQ      |L6.292|
                  |L6.282|
;;;132    		{STMFLASH_Write(FLASH_SAVE_ADD,datatemp2,16);}
00011a  2210              MOVS     r2,#0x10
00011c  a901              ADD      r1,sp,#4
00011e  4802              LDR      r0,|L6.296|
000120  f7fffffe          BL       STMFLASH_Write
                  |L6.292|
;;;133    }
000124  b009              ADD      sp,sp,#0x24
000126  bd00              POP      {pc}
;;;134    void Clear_Flash_Dat(void)
                          ENDP

                  |L6.296|
                          DCD      0x0800fc00
                  |L6.300|
                          DCD      FM1702_Key
                  |L6.304|
                          DCD      WaterCost
                  |L6.308|
                          DCD      CostNum
                  |L6.312|
                          DCD      g_IAP_Flag

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  53544d46          DCB      "STMFLASH_Read: %02X%02X%02X%02X; %02X%02X%02X%02X; %02X"
000004  4c415348
000008  5f526561
00000c  643a2025
000010  30325825
000014  30325825
000018  30325825
00001c  3032583b
000020  20253032
000024  58253032
000028  58253032
00002c  58253032
000030  583b2025
000034  303258  
000037  25303258          DCB      "%02X%02X%02X; %02X%02X%02X%02X;\r\n",0
00003b  25303258
00003f  25303258
000043  3b202530
000047  32582530
00004b  32582530
00004f  32582530
000053  32583b0d
000057  0a00    

                          AREA ||.data||, DATA, ALIGN=0

                  Physical_ADD
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  FM1702_Key
000004  ffffffff          DCB      0xff,0xff,0xff,0xff
000008  fff129            DCB      0xff,0xf1,0x29
                  WaterCost
00000b  32                DCB      0x32
                  CostNum
00000c  1d                DCB      0x1d
                  g_IAP_Flag
00000d  00                DCB      0x00
