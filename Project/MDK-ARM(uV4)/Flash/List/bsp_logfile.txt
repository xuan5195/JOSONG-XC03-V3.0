; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_logfile.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_logfile.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I"C:\Users\xuan5\Desktop\JOSONG-XS03 V3.0\Project\MDK-ARM(uV4)\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_logfile.crf ..\..\User\bsp\bsp_logfile.c]
                          THUMB

                          AREA ||i.Read_LogDat||, CODE, READONLY, ALIGN=2

                  Read_LogDat PROC
;;;82     //pBuffer：读出数据缓存
;;;83     void Read_LogDat(uint16_t _no,uint8_t *pBuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;84     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;85     	u32 UseADD=0;
000006  2500              MOVS     r5,#0
;;;86     	UseADD += (_no/LOGFILE_PAGE_COUNT)*STM_SECTOR_SAVE;		//当面页数
000008  4620              MOV      r0,r4
00000a  17e1              ASRS     r1,r4,#31
00000c  eb046191          ADD      r1,r4,r1,LSR #26
000010  1189              ASRS     r1,r1,#6
000012  eb052581          ADD      r5,r5,r1,LSL #10
;;;87     	UseADD += (_no%LOGFILE_PAGE_COUNT)*LOGFILE_BYTE_COUNT;	//当面条数
000016  17e1              ASRS     r1,r4,#31
000018  eb046191          ADD      r1,r4,r1,LSR #26
00001c  1189              ASRS     r1,r1,#6
00001e  eba41181          SUB      r1,r4,r1,LSL #6
000022  eb051501          ADD      r5,r5,r1,LSL #4
;;;88     	UseADD += LOGFILE_SAVE_ADD;								//第一页 起始地址
000026  4804              LDR      r0,|L1.56|
000028  4405              ADD      r5,r5,r0
;;;89     //	printf("ADD=0x%08X, ",UseADD);
;;;90     	STMFLASH_Read(UseADD,pBuffer,LOGFILE_BYTE_COUNT);
00002a  2210              MOVS     r2,#0x10
00002c  4631              MOV      r1,r6
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       STMFLASH_Read
;;;91     //    printf("%02X%02X%02X%02X %02X%02X%02X%02X %02X%02X%02X%02X %02X%02X%02X%02X;\r\n",pBuffer[0],pBuffer[1],pBuffer[2],pBuffer[3],\
;;;92         pBuffer[4],pBuffer[5],pBuffer[6],pBuffer[7],pBuffer[8],pBuffer[9],pBuffer[10],pBuffer[11],pBuffer[12],pBuffer[13],pBuffer[14],pBuffer[15]);
;;;93     }
000034  bd70              POP      {r4-r6,pc}
;;;94     
                          ENDP

000036  0000              DCW      0x0000
                  |L1.56|
                          DCD      0x0800d000

                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=1

                  STMFLASH_Write PROC
;;;7      
;;;8      static void STMFLASH_Write(u32 WriteAddr,u8 *pBuffer,u16 NumToWrite)	
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;9      {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;10      	u16 i,DateTemp=0;    
00000a  f04f0800          MOV      r8,#0
;;;11     	FLASH_Unlock();		//解锁
00000e  f7fffffe          BL       FLASH_Unlock
;;;12     	FLASH_ClearFlag(FLASH_FLAG_BSY|FLASH_FLAG_EOP|FLASH_FLAG_PGERR|FLASH_FLAG_WRPRTERR);
000012  2035              MOVS     r0,#0x35
000014  f7fffffe          BL       FLASH_ClearFlag
;;;13     	//FLASH_ErasePage(FLASH_SAVE_ADD);	
;;;14     	for(i=0;i<NumToWrite;(i=i+2))
000018  2400              MOVS     r4,#0
00001a  e00d              B        |L2.56|
                  |L2.28|
;;;15     	{
;;;16     		DateTemp = ((u16)pBuffer[i+1])<<8 ;
00001c  1c60              ADDS     r0,r4,#1
00001e  5c28              LDRB     r0,[r5,r0]
000020  ea4f2800          LSL      r8,r0,#8
;;;17     		DateTemp = DateTemp|pBuffer[i];
000024  5d28              LDRB     r0,[r5,r4]
000026  ea400808          ORR      r8,r0,r8
;;;18     		FLASH_ProgramHalfWord(WriteAddr,DateTemp);
00002a  4641              MOV      r1,r8
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_ProgramHalfWord
;;;19     	    WriteAddr+=2;//地址增加2.
000032  1cb6              ADDS     r6,r6,#2
000034  1ca0              ADDS     r0,r4,#2              ;14
000036  b284              UXTH     r4,r0                 ;14
                  |L2.56|
000038  42bc              CMP      r4,r7                 ;14
00003a  dbef              BLT      |L2.28|
;;;20     	}  
;;;21     	FLASH_Lock();//上锁
00003c  f7fffffe          BL       FLASH_Lock
;;;22     }
000040  e8bd81f0          POP      {r4-r8,pc}
;;;23     
                          ENDP


                          AREA ||i.Search_LogNum||, CODE, READONLY, ALIGN=1

                  Search_LogNum PROC
;;;26     //返回值：当面记录在条数 0-799；
;;;27     uint16_t Search_LogNum(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;28     {
;;;29     	uint16_t _Num=0;
000002  2600              MOVS     r6,#0
;;;30     	uint8_t i,j;
;;;31     	uint8_t _Buffer[16];
;;;32     	for(i=0;i<10;i++)
000004  2400              MOVS     r4,#0
000006  e020              B        |L3.74|
                  |L3.8|
;;;33     	{
;;;34     		for(j=0;j<LOGFILE_PAGE_COUNT;j++)
000008  2500              MOVS     r5,#0
00000a  e01a              B        |L3.66|
                  |L3.12|
;;;35     		{
;;;36     			_Num = i*LOGFILE_PAGE_COUNT+j;
00000c  eb051684          ADD      r6,r5,r4,LSL #6
;;;37     			Read_LogDat(_Num,_Buffer);
000010  4669              MOV      r1,sp
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       Read_LogDat
;;;38     			if((_Buffer[0]==0xFF)&&(_Buffer[1]==0xFF)&&(_Buffer[2]==0xFF)&&(_Buffer[3]==0xFF))
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  28ff              CMP      r0,#0xff
00001e  d10e              BNE      |L3.62|
000020  f89d0001          LDRB     r0,[sp,#1]
000024  28ff              CMP      r0,#0xff
000026  d10a              BNE      |L3.62|
000028  f89d0002          LDRB     r0,[sp,#2]
00002c  28ff              CMP      r0,#0xff
00002e  d106              BNE      |L3.62|
000030  f89d0003          LDRB     r0,[sp,#3]
000034  28ff              CMP      r0,#0xff
000036  d102              BNE      |L3.62|
;;;39     			{
;;;40     				return _Num;
000038  4630              MOV      r0,r6
                  |L3.58|
;;;41     			}
;;;42     		}
;;;43     	}
;;;44     	return 0xEF00;	//错误值
;;;45     }
00003a  b004              ADD      sp,sp,#0x10
00003c  bd70              POP      {r4-r6,pc}
                  |L3.62|
00003e  1c68              ADDS     r0,r5,#1              ;34
000040  b2c5              UXTB     r5,r0                 ;34
                  |L3.66|
000042  2d40              CMP      r5,#0x40              ;34
000044  dbe2              BLT      |L3.12|
000046  1c60              ADDS     r0,r4,#1              ;32
000048  b2c4              UXTB     r4,r0                 ;32
                  |L3.74|
00004a  2c0a              CMP      r4,#0xa               ;32
00004c  dbdc              BLT      |L3.8|
00004e  f44f406f          MOV      r0,#0xef00            ;44
000052  e7f2              B        |L3.58|
;;;46     
                          ENDP


                          AREA ||i.Show_LogDat||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Show_LogDat PROC
;;;95     //显示页存储数据
;;;96     void Show_LogDat(uint16_t _no)
000000  b570              PUSH     {r4-r6,lr}
;;;97     {
000002  b092              SUB      sp,sp,#0x48
000004  4604              MOV      r4,r0
;;;98     	uint16_t _Num=0,i=0;
000006  2600              MOVS     r6,#0
000008  2500              MOVS     r5,#0
;;;99     	uint8_t _Buffer[16];	//数据缓存
;;;100    	_Num = (_no/LOGFILE_PAGE_COUNT)*LOGFILE_PAGE_COUNT;	//取出最后页的起始条数;
00000a  4620              MOV      r0,r4
00000c  17e1              ASRS     r1,r4,#31
00000e  eb046191          ADD      r1,r4,r1,LSR #26
000012  1189              ASRS     r1,r1,#6
000014  f64f72ff          MOV      r2,#0xffff
000018  ea021681          AND      r6,r2,r1,LSL #6
;;;101    	printf("Show_LogDat: %03d\r\n",_Num);
00001c  4631              MOV      r1,r6
00001e  a021              ADR      r0,|L4.164|
000020  f7fffffe          BL       __2printf
;;;102    	for(i=_Num;i<_no;i++)
000024  4635              MOV      r5,r6
000026  e039              B        |L4.156|
                  |L4.40|
;;;103    	{
;;;104    		Read_LogDat(i,_Buffer);
000028  a90e              ADD      r1,sp,#0x38
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       Read_LogDat
;;;105    		printf("_Num=%03d, ",i);
000030  4629              MOV      r1,r5
000032  a021              ADR      r0,|L4.184|
000034  f7fffffe          BL       __2printf
;;;106    		printf("%02X%02X%02X%02X %02X%02X%02X%02X %02X%02X%02X%02X %02X%02X%02X%02X;\r\n",_Buffer[0],_Buffer[1],_Buffer[2],_Buffer[3],\
000038  f89d0047          LDRB     r0,[sp,#0x47]
00003c  f89d1046          LDRB     r1,[sp,#0x46]
000040  f89d2045          LDRB     r2,[sp,#0x45]
000044  f89d3044          LDRB     r3,[sp,#0x44]
000048  e9cd3209          STRD     r3,r2,[sp,#0x24]
00004c  e9cd100b          STRD     r1,r0,[sp,#0x2c]
000050  f89d0043          LDRB     r0,[sp,#0x43]
000054  f89d1042          LDRB     r1,[sp,#0x42]
000058  f89d2041          LDRB     r2,[sp,#0x41]
00005c  f89d3040          LDRB     r3,[sp,#0x40]
000060  e9cd3205          STRD     r3,r2,[sp,#0x14]
000064  e9cd1007          STRD     r1,r0,[sp,#0x1c]
000068  f89d103f          LDRB     r1,[sp,#0x3f]
00006c  f89d003e          LDRB     r0,[sp,#0x3e]
000070  f89d203d          LDRB     r2,[sp,#0x3d]
000074  f89d303c          LDRB     r3,[sp,#0x3c]
000078  e9cd3201          STRD     r3,r2,[sp,#4]
00007c  e9cd0103          STRD     r0,r1,[sp,#0xc]
000080  f89d003b          LDRB     r0,[sp,#0x3b]
000084  9000              STR      r0,[sp,#0]
000086  f89d303a          LDRB     r3,[sp,#0x3a]
00008a  f89d2039          LDRB     r2,[sp,#0x39]
00008e  f89d1038          LDRB     r1,[sp,#0x38]
000092  480c              LDR      r0,|L4.196|
000094  f7fffffe          BL       __2printf
000098  1c68              ADDS     r0,r5,#1              ;102
00009a  b285              UXTH     r5,r0                 ;102
                  |L4.156|
00009c  42a5              CMP      r5,r4                 ;102
00009e  dbc3              BLT      |L4.40|
;;;107            _Buffer[4],_Buffer[5],_Buffer[6],_Buffer[7],_Buffer[8],_Buffer[9],_Buffer[10],_Buffer[11],_Buffer[12],_Buffer[13],_Buffer[14],_Buffer[15]);
;;;108    	}
;;;109    }
0000a0  b012              ADD      sp,sp,#0x48
0000a2  bd70              POP      {r4-r6,pc}
;;;110    
                          ENDP

                  |L4.164|
0000a4  53686f77          DCB      "Show_LogDat: %03d\r\n",0
0000a8  5f4c6f67
0000ac  4461743a
0000b0  20253033
0000b4  640d0a00
                  |L4.184|
0000b8  5f4e756d          DCB      "_Num=%03d, ",0
0000bc  3d253033
0000c0  642c2000
                  |L4.196|
                          DCD      ||.conststring||+0x48

                          AREA ||i.Write_LogDat||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Write_LogDat PROC
;;;48     //pBuffer：写入数据缓存
;;;49     void Write_LogDat(uint16_t _no,uint8_t *pBuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  b08e              SUB      sp,sp,#0x38
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;51     	u32 UseADD=0;
000008  2600              MOVS     r6,#0
;;;52     	if(_no!=0)
00000a  b175              CBZ      r5,|L5.42|
;;;53     	{
;;;54     		UseADD += (_no/LOGFILE_PAGE_COUNT)*STM_SECTOR_SAVE;		//加入页地址 1024
00000c  4628              MOV      r0,r5
00000e  17e9              ASRS     r1,r5,#31
000010  eb056191          ADD      r1,r5,r1,LSR #26
000014  1189              ASRS     r1,r1,#6
000016  eb062681          ADD      r6,r6,r1,LSL #10
;;;55     		UseADD += (_no%LOGFILE_PAGE_COUNT)*LOGFILE_BYTE_COUNT;	//加入页内偏移地址 12-->16Byte
00001a  17e9              ASRS     r1,r5,#31
00001c  eb056191          ADD      r1,r5,r1,LSR #26
000020  1189              ASRS     r1,r1,#6
000022  eba51181          SUB      r1,r5,r1,LSL #6
000026  eb061601          ADD      r6,r6,r1,LSL #4
                  |L5.42|
;;;56     	}
;;;57     	UseADD += LOGFILE_SAVE_ADD;								//加入起始地址 0x0800D000
00002a  482b              LDR      r0,|L5.216|
00002c  4406              ADD      r6,r6,r0
;;;58     	printf(">>写日志,ADD:0x%08X | ",UseADD);
00002e  4631              MOV      r1,r6
000030  a02a              ADR      r0,|L5.220|
000032  f7fffffe          BL       __2printf
;;;59     	STMFLASH_Write(UseADD,pBuffer,LOGFILE_BYTE_COUNT);		//数据写入
000036  2210              MOVS     r2,#0x10
000038  4621              MOV      r1,r4
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       STMFLASH_Write
;;;60     	printf("%02X%02X%02X%02X,%02X%02X%02X%02X,%02X%02X%02X%02X,%02X%02X%02X%02X."\
000040  7be0              LDRB     r0,[r4,#0xf]
000042  7ba1              LDRB     r1,[r4,#0xe]
000044  7b62              LDRB     r2,[r4,#0xd]
000046  7b23              LDRB     r3,[r4,#0xc]
000048  e9cd3209          STRD     r3,r2,[sp,#0x24]
00004c  e9cd100b          STRD     r1,r0,[sp,#0x2c]
000050  7ae0              LDRB     r0,[r4,#0xb]
000052  7aa1              LDRB     r1,[r4,#0xa]
000054  7a62              LDRB     r2,[r4,#9]
000056  7a23              LDRB     r3,[r4,#8]
000058  e9cd3205          STRD     r3,r2,[sp,#0x14]
00005c  e9cd1007          STRD     r1,r0,[sp,#0x1c]
000060  79e0              LDRB     r0,[r4,#7]
000062  79a1              LDRB     r1,[r4,#6]
000064  7962              LDRB     r2,[r4,#5]
000066  7923              LDRB     r3,[r4,#4]
000068  e9cd3201          STRD     r3,r2,[sp,#4]
00006c  e9cd1003          STRD     r1,r0,[sp,#0xc]
000070  78e0              LDRB     r0,[r4,#3]
000072  9000              STR      r0,[sp,#0]
000074  78a3              LDRB     r3,[r4,#2]
000076  7862              LDRB     r2,[r4,#1]
000078  7821              LDRB     r1,[r4,#0]
00007a  481e              LDR      r0,|L5.244|
00007c  f7fffffe          BL       __2printf
;;;61     	,pBuffer[ 0],pBuffer[ 1],pBuffer[ 2],pBuffer[ 3],pBuffer[ 4],pBuffer[ 5],pBuffer[ 6],pBuffer[ 7]\
;;;62     	,pBuffer[ 8],pBuffer[ 9],pBuffer[10],pBuffer[11],pBuffer[12],pBuffer[13],pBuffer[14],pBuffer[15]);
;;;63     	if( (_no%LOGFILE_PAGE_COUNT) == (LOGFILE_PAGE_COUNT-1) )	//到最后一个，把下页擦除；
000080  17e9              ASRS     r1,r5,#31
000082  eb056191          ADD      r1,r5,r1,LSR #26
000086  1189              ASRS     r1,r1,#6
000088  eba51181          SUB      r1,r5,r1,LSL #6
00008c  293f              CMP      r1,#0x3f
00008e  d11d              BNE      |L5.204|
;;;64     	{
;;;65     		printf("\r\nThe last one,Next Page Erase. ");
000090  a019              ADR      r0,|L5.248|
000092  f7fffffe          BL       __2printf
;;;66     		UseADD = (_no/LOGFILE_PAGE_COUNT)*STM_SECTOR_SAVE;		//加入页地址 1024
000096  4628              MOV      r0,r5
000098  17e9              ASRS     r1,r5,#31
00009a  eb056191          ADD      r1,r5,r1,LSR #26
00009e  1189              ASRS     r1,r1,#6
0000a0  028e              LSLS     r6,r1,#10
;;;67     		UseADD = UseADD + LOGFILE_SAVE_ADD;								//加入起始地址 0x0800BC00
0000a2  480d              LDR      r0,|L5.216|
0000a4  4406              ADD      r6,r6,r0
;;;68     		FLASH_Unlock();		        //解锁Flash
0000a6  f7fffffe          BL       FLASH_Unlock
;;;69             UseADD = UseADD + 0x400;	//加入偏移地址 0x400
0000aa  f5066680          ADD      r6,r6,#0x400
;;;70     		if(UseADD==0x0800F800)	    //当前为最后一页面，擦除第一页；
0000ae  481b              LDR      r0,|L5.284|
0000b0  4286              CMP      r6,r0
0000b2  d100              BNE      |L5.182|
;;;71     		{
;;;72     			UseADD = LOGFILE_SAVE_ADD;	//第一页 起始地址
0000b4  4e08              LDR      r6,|L5.216|
                  |L5.182|
;;;73     		}
;;;74     		printf("StartADD=%08X,Flash_Page=%02d/64.",UseADD,(UseADD&0x0000FFFF)>>10);
0000b6  f3c62285          UBFX     r2,r6,#10,#6
0000ba  4631              MOV      r1,r6
0000bc  a018              ADR      r0,|L5.288|
0000be  f7fffffe          BL       __2printf
;;;75     		FLASH_ErasePage(UseADD);	//下页起始地址
0000c2  4630              MOV      r0,r6
0000c4  f7fffffe          BL       FLASH_ErasePage
;;;76     		FLASH_Lock();	//上锁
0000c8  f7fffffe          BL       FLASH_Lock
                  |L5.204|
;;;77     	}
;;;78     	printf("\r\n");
0000cc  a01d              ADR      r0,|L5.324|
0000ce  f7fffffe          BL       __2printf
;;;79     }
0000d2  b00e              ADD      sp,sp,#0x38
0000d4  bd70              POP      {r4-r6,pc}
;;;80     
                          ENDP

0000d6  0000              DCW      0x0000
                  |L5.216|
                          DCD      0x0800d000
                  |L5.220|
0000dc  3e3ed0b4          DCB      ">>",208,180,200,213,214,190,",ADD:0x%08X | ",0
0000e0  c8d5d6be
0000e4  2c414444
0000e8  3a307825
0000ec  30385820
0000f0  7c2000  
0000f3  00                DCB      0
                  |L5.244|
                          DCD      ||.conststring||
                  |L5.248|
0000f8  0d0a5468          DCB      "\r\nThe last one,Next Page Erase. ",0
0000fc  65206c61
000100  7374206f
000104  6e652c4e
000108  65787420
00010c  50616765
000110  20457261
000114  73652e20
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L5.284|
                          DCD      0x0800f800
                  |L5.288|
000120  53746172          DCB      "StartADD=%08X,Flash_Page=%02d/64.",0
000124  74414444
000128  3d253038
00012c  582c466c
000130  6173685f
000134  50616765
000138  3d253032
00013c  642f3634
000140  2e00    
000142  00                DCB      0
000143  00                DCB      0
                  |L5.324|
000144  0d0a00            DCB      "\r\n",0
000147  00                DCB      0

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  25303258          DCB      "%02X%02X%02X%02X,%02X%02X%02X%02X,%02X%02X%02X%02X,%02X"
000004  25303258
000008  25303258
00000c  25303258
000010  2c253032
000014  58253032
000018  58253032
00001c  58253032
000020  582c2530
000024  32582530
000028  32582530
00002c  32582530
000030  32582c25
000034  303258  
000037  25303258          DCB      "%02X%02X%02X.",0
00003b  25303258
00003f  25303258
000043  2e00    
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
000048  25303258          DCB      "%02X%02X%02X%02X %02X%02X%02X%02X %02X%02X%02X%02X %02X"
00004c  25303258
000050  25303258
000054  25303258
000058  20253032
00005c  58253032
000060  58253032
000064  58253032
000068  58202530
00006c  32582530
000070  32582530
000074  32582530
000078  32582025
00007c  303258  
00007f  25303258          DCB      "%02X%02X%02X;\r\n",0
000083  25303258
000087  25303258
00008b  3b0d0a00
